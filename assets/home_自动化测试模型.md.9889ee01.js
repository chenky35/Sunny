import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.4c635b23.js";const F=JSON.parse('{"title":"自动化测试模型","description":"","frontmatter":{},"headers":[],"relativePath":"home/自动化测试模型.md","filePath":"home/自动化测试模型.md","lastUpdated":1703082481000}'),p={name:"home/自动化测试模型.md"},o=l(`<h1 id="自动化测试模型" tabindex="-1">自动化测试模型 <a class="header-anchor" href="#自动化测试模型" aria-label="Permalink to &quot;自动化测试模型&quot;">​</a></h1><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><h3 id="库" tabindex="-1">库 <a class="header-anchor" href="#库" aria-label="Permalink to &quot;库&quot;">​</a></h3><p>library，由代码集合成的产品，可供程序员调用。面向对象的代码组织形成的库称为类库，面向过程的代码组织形成的库称为函数库。WebDriver就属于库，提供了一组操作Web页面的类与方法，可称为Web自动化测试库。</p><h3 id="框架" tabindex="-1">框架 <a class="header-anchor" href="#框架" aria-label="Permalink to &quot;框架&quot;">​</a></h3><p>framework，为解决一个或一类问题而开发的产品，用户一般只需要使用框架提供的类或函数，即可实现全部功能。unittest主要用于测试用例的组织与执行，及测试结果的生成，主要任务是帮助完成测试工作，因此称为测试框架。</p><h3 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h3><p>tools，与框架所做的事情类似，提供了更高层次的封装，屏蔽了底层代码，提供了单独的操作界面供用户使用。如UFT(QTP)、Katalon属于自动化测试工具。</p><h2 id="自动化测试模型-1" tabindex="-1">自动化测试模型 <a class="header-anchor" href="#自动化测试模型-1" aria-label="Permalink to &quot;自动化测试模型&quot;">​</a></h2><p>分为线性测试、模块化与类库、数据驱动测试、关键字驱动测试。几种测试模型并非取代关系，在实际实施过程中，往往需要相互结合使用。</p><h3 id="线性测试" tabindex="-1">线性测试 <a class="header-anchor" href="#线性测试" aria-label="Permalink to &quot;线性测试&quot;">​</a></h3><p>通过录制或编写对应用程序的操作步骤，产生相应的线性脚本，每个线性脚本相对独立，不产生依赖和调用，是早期自动化测试的一种形式，单纯地模拟用户完整的操作场景。</p><p>缺点：不易维护。</p><h3 id="模块化与类库" tabindex="-1">模块化与类库 <a class="header-anchor" href="#模块化与类库" aria-label="Permalink to &quot;模块化与类库&quot;">​</a></h3><p>借鉴编程语言中的模块化思想，把重复的操作单独封装成公共模块，在测试用例执行过程中，当需要用到模块封装时对其进行调用，可最大限度消除重复，提高测试用例的可维护性。</p><h3 id="数据驱动测试" tabindex="-1">数据驱动测试 <a class="header-anchor" href="#数据驱动测试" aria-label="Permalink to &quot;数据驱动测试&quot;">​</a></h3><p>数据的改变驱动自动化测试的执行，最终引起测试结果的改变。把数据驱动所需要的测试数据参数化。</p><h3 id="关键字驱动测试" tabindex="-1">关键字驱动测试 <a class="header-anchor" href="#关键字驱动测试" aria-label="Permalink to &quot;关键字驱动测试&quot;">​</a></h3><p>又称表驱动测试或基于动作字测试。这类框架会将自动化操作封装为关键字，避免测试人员直接接触代码，多以填表格的方式降低脚本的编写难度。Robot Framework是主流的关键字驱动测试框架之一。</p><h2 id="模块化和参数化" tabindex="-1">模块化和参数化 <a class="header-anchor" href="#模块化和参数化" aria-label="Permalink to &quot;模块化和参数化&quot;">​</a></h2><p>在创建函数或类方法时为它们设置入参，从而使它们可以根据不同的参数执行相应的操作。</p><p>创建moduel.py文件存放邮箱登录和退出动作：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Mail</span><span style="color:#E1E4E8;">():       </span><span style="color:#6A737D;"># 创建Mail类</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, driver):     </span><span style="color:#6A737D;"># 初始化方法中接收driver驱动并赋值给self.driver</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">(self, username, password):        </span><span style="color:#6A737D;"># 实现登录动作，方法参数化</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.switch_to.frame(</span><span style="color:#9ECBFF;">&#39;x-URS-iframe&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.find_element(By.</span><span style="color:#79B8FF;">NAME</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;email&#39;</span><span style="color:#E1E4E8;">).clear()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.find_element(By.</span><span style="color:#79B8FF;">NAME</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;email&#39;</span><span style="color:#E1E4E8;">).send_keys(username)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.find_element(By.</span><span style="color:#79B8FF;">NAME</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">).clear()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.find_element(By.</span><span style="color:#79B8FF;">NAME</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">).send_keys(password)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.find_element(By.</span><span style="color:#79B8FF;">ID</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;dologin&#39;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">logout</span><span style="color:#E1E4E8;">(self):       </span><span style="color:#6A737D;"># 实现登出动作</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.find_element(By.</span><span style="color:#79B8FF;">LINK_TEXT</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;退出&#39;</span><span style="color:#E1E4E8;">).click()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mail</span><span style="color:#24292E;">():       </span><span style="color:#6A737D;"># 创建Mail类</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, driver):     </span><span style="color:#6A737D;"># 初始化方法中接收driver驱动并赋值给self.driver</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(self, username, password):        </span><span style="color:#6A737D;"># 实现登录动作，方法参数化</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.switch_to.frame(</span><span style="color:#032F62;">&#39;x-URS-iframe&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.find_element(By.</span><span style="color:#005CC5;">NAME</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;email&#39;</span><span style="color:#24292E;">).clear()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.find_element(By.</span><span style="color:#005CC5;">NAME</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;email&#39;</span><span style="color:#24292E;">).send_keys(username)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.find_element(By.</span><span style="color:#005CC5;">NAME</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;">).clear()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.find_element(By.</span><span style="color:#005CC5;">NAME</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;">).send_keys(password)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.find_element(By.</span><span style="color:#005CC5;">ID</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;dologin&#39;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">logout</span><span style="color:#24292E;">(self):       </span><span style="color:#6A737D;"># 实现登出动作</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.find_element(By.</span><span style="color:#005CC5;">LINK_TEXT</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;退出&#39;</span><span style="color:#24292E;">).click()</span></span></code></pre></div><p>测试脚本test_mail.py，调用Mali类中的login()和logout()方法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> time </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sleep</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Mail</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">driver.get(</span><span style="color:#9ECBFF;">&#39;http://www.126.com&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 调用Mail类</span></span>
<span class="line"><span style="color:#E1E4E8;">mail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Mail(driver)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 用不同测试数据调用login()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">mail.login(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)      </span><span style="color:#6A737D;"># 登录账号为空</span></span>
<span class="line"><span style="color:#E1E4E8;">mail.login(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">)      </span><span style="color:#6A737D;"># 用户名为空</span></span>
<span class="line"><span style="color:#E1E4E8;">mail.login(</span><span style="color:#9ECBFF;">&#39;username&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)      </span><span style="color:#6A737D;"># 密码为空</span></span>
<span class="line"><span style="color:#E1E4E8;">mail.login(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">)    </span><span style="color:#6A737D;"># 用户名/密码错误</span></span>
<span class="line"><span style="color:#E1E4E8;">mail.login(</span><span style="color:#9ECBFF;">&#39;admin&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;admin123&#39;</span><span style="color:#E1E4E8;">)     </span><span style="color:#6A737D;"># 管理员登录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">mail.logout()   </span><span style="color:#6A737D;"># 退出</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">driver.quit()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> time </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sleep</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> module </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Mail</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">driver.get(</span><span style="color:#032F62;">&#39;http://www.126.com&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 调用Mail类</span></span>
<span class="line"><span style="color:#24292E;">mail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Mail(driver)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 用不同测试数据调用login()方法</span></span>
<span class="line"><span style="color:#24292E;">mail.login(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)      </span><span style="color:#6A737D;"># 登录账号为空</span></span>
<span class="line"><span style="color:#24292E;">mail.login(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;">)      </span><span style="color:#6A737D;"># 用户名为空</span></span>
<span class="line"><span style="color:#24292E;">mail.login(</span><span style="color:#032F62;">&#39;username&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)      </span><span style="color:#6A737D;"># 密码为空</span></span>
<span class="line"><span style="color:#24292E;">mail.login(</span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">)    </span><span style="color:#6A737D;"># 用户名/密码错误</span></span>
<span class="line"><span style="color:#24292E;">mail.login(</span><span style="color:#032F62;">&#39;admin&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;admin123&#39;</span><span style="color:#24292E;">)     </span><span style="color:#6A737D;"># 管理员登录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">mail.logout()   </span><span style="color:#6A737D;"># 退出</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">driver.quit()</span></span></code></pre></div><h2 id="读取数据文件" tabindex="-1">读取数据文件 <a class="header-anchor" href="#读取数据文件" aria-label="Permalink to &quot;读取数据文件&quot;">​</a></h2><h3 id="读取txt文件" tabindex="-1">读取txt文件 <a class="header-anchor" href="#读取txt文件" aria-label="Permalink to &quot;读取txt文件&quot;">​</a></h3><p>read()：读取整个文件</p><p>readline()：读取一行数据</p><p>readlines()：读取所有行的数据</p><p>创建数据文件：./user_info.txt</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">:123</span></span>
<span class="line"><span style="color:#e1e4e8;">user:</span></span>
<span class="line"><span style="color:#e1e4e8;">error:error</span></span>
<span class="line"><span style="color:#e1e4e8;">admin:admin123</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">:123</span></span>
<span class="line"><span style="color:#24292e;">user:</span></span>
<span class="line"><span style="color:#24292e;">error:error</span></span>
<span class="line"><span style="color:#24292e;">admin:admin123</span></span></code></pre></div><p>创建read_txt.py，读取txt文件</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 通过open()以r的方式打开文件，读取所有行并赋值给data</span></span>
<span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./user_info.txt&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> user_file:</span></span>
<span class="line"><span style="color:#E1E4E8;">	data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user_file.readlines()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#6A737D;"># 格式化处理</span></span>
<span class="line"><span style="color:#E1E4E8;">users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> line </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> data:</span></span>
<span class="line"><span style="color:#E1E4E8;">	user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> line[:</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].split(</span><span style="color:#9ECBFF;">&#39;:&#39;</span><span style="color:#E1E4E8;">)	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;"># [:-1]对字符串进行切片，省略最后一个字符，读取的每行数据结尾会有换行符/n</span></span>
<span class="line"><span style="color:#E1E4E8;">	users.append(user)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(users)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 通过open()以r的方式打开文件，读取所有行并赋值给data</span></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./user_info.txt&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> user_file:</span></span>
<span class="line"><span style="color:#24292E;">	data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user_file.readlines()</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#6A737D;"># 格式化处理</span></span>
<span class="line"><span style="color:#24292E;">users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> line </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> data:</span></span>
<span class="line"><span style="color:#24292E;">	user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> line[:</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].split(</span><span style="color:#032F62;">&#39;:&#39;</span><span style="color:#24292E;">)	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;"># [:-1]对字符串进行切片，省略最后一个字符，读取的每行数据结尾会有换行符/n</span></span>
<span class="line"><span style="color:#24292E;">	users.append(user)</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(users)</span></span></code></pre></div><p>运行结果：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">[&#39;&#39;,&#39;123&#39;]</span></span>
<span class="line"><span style="color:#e1e4e8;">[&#39;user&#39;,&#39;&#39;]</span></span>
<span class="line"><span style="color:#e1e4e8;">[&#39;error&#39;,&#39;error&#39;]</span></span>
<span class="line"><span style="color:#e1e4e8;">[&#39;admin&#39;,&#39;admin123&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[&#39;&#39;,&#39;123&#39;]</span></span>
<span class="line"><span style="color:#24292e;">[&#39;user&#39;,&#39;&#39;]</span></span>
<span class="line"><span style="color:#24292e;">[&#39;error&#39;,&#39;error&#39;]</span></span>
<span class="line"><span style="color:#24292e;">[&#39;admin&#39;,&#39;admin123&#39;]</span></span></code></pre></div><p>取users数组中的数据，调用login()方法</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">mail = Mail(driver)</span></span>
<span class="line"><span style="color:#e1e4e8;">mail.login(users[0][0], users[0][1])</span></span>
<span class="line"><span style="color:#e1e4e8;">mail.login(users[1][0], users[1][1])</span></span>
<span class="line"><span style="color:#e1e4e8;">mail.login(users[2][0], users[2][1])</span></span>
<span class="line"><span style="color:#e1e4e8;">mail.login(users[3][0], users[3][1])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mail = Mail(driver)</span></span>
<span class="line"><span style="color:#24292e;">mail.login(users[0][0], users[0][1])</span></span>
<span class="line"><span style="color:#24292e;">mail.login(users[1][0], users[1][1])</span></span>
<span class="line"><span style="color:#24292e;">mail.login(users[2][0], users[2][1])</span></span>
<span class="line"><span style="color:#24292e;">mail.login(users[3][0], users[3][1])</span></span></code></pre></div><h3 id="读取csv文件" tabindex="-1">读取CSV文件 <a class="header-anchor" href="#读取csv文件" aria-label="Permalink to &quot;读取CSV文件&quot;">​</a></h3><p>创建数据文件：./user_info.csv</p><p>数据文件中通常会用到中文，通过Python标准的模块编码和解码器codecs解决乱码问题，通过codecs提供的open()方法，并在打开时指定编码类型。</p><p>Python内置模块itertools提供了用于操作迭代对象的函数，islice()函数，可以返回一个迭代器，第一个参数指定迭代对象，第二个参数指定开始迭代的位置，第三个参数表示结束位。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> csv</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> codecs</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> itertools </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> islice</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> csv.reader(codecs.open(</span><span style="color:#9ECBFF;">&#39;./user_info.csv&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utf_8_sig&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> line </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> islice(data, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">):		</span><span style="color:#6A737D;"># 从第2个开始，跳过CSV文件第一行，因为第一行通常是字段名</span></span>
<span class="line"><span style="color:#E1E4E8;">	users.append(line)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(users)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> csv</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> codecs</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> itertools </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> islice</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> csv.reader(codecs.open(</span><span style="color:#032F62;">&#39;./user_info.csv&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;utf_8_sig&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> line </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> islice(data, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">):		</span><span style="color:#6A737D;"># 从第2个开始，跳过CSV文件第一行，因为第一行通常是字段名</span></span>
<span class="line"><span style="color:#24292E;">	users.append(line)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(users)</span></span></code></pre></div><h3 id="读取xml文件" tabindex="-1">读取XML文件 <a class="header-anchor" href="#读取xml文件" aria-label="Permalink to &quot;读取XML文件&quot;">​</a></h3>`,44),e=[o];function r(c,t,i,y,E,d){return a(),n("div",null,e)}const u=s(p,[["render",r]]);export{F as __pageData,u as default};
